{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to yuidoc2 0.1.0!","text":"<p>YUIDoc is a Node.js application that generates API documentation from comments in source, using a syntax similar to tools like Javadoc and Doxygen. YUIDoc provides:</p> <ul> <li> <p>Live previews. YUIDoc includes a standalone doc server , making it trivial to preview your docs as you write.</p> </li> <li> <p>Modern markup. YUIDoc's generated documentation is an attractive, functional web application with real URLs and graceful fallbacks for spiders and other agents that can't run JavaScript.</p> </li> <li> <p>Wide language support. YUIDoc was originally designed for the YUI project, but it is not tied to any particular library or programming language. You can use it with any language that supports <code>/* */</code> comment blocks.</p> </li> </ul>"},{"location":"#installation-and-usage","title":"Installation and Usage","text":"<ol> <li>Download and install Node.js</li> <li>Run <code>npm -g install yuidocjs</code>.</li> <li>Run <code>yuidoc .</code> at the top of your JS source tree.</li> </ol> <p>That's it! For more information about running the <code>yuidoc</code> commandline tool, refer to \"Using YUIDoc\".</p>"},{"location":"#user-guides","title":"User Guides","text":"<ul> <li>Using YUIDoc \u2014 Understanding YUIDoc command line arguments and usage.</li> <li>YUIDoc Syntax Reference \u2014 Detailed instructions for writing YUIDoc comment blocks.</li> <li>YUIDoc Themes \u2014 How to modify the default YUIDoc theme.</li> </ul>"},{"location":"#example-yuidoc-comment-blocks","title":"Example YUIDoc Comment Blocks","text":"<p>YUIDoc parses a modified form of JSDoc tags. This section provides a taste of some of the more common constructs in YUIDoc. For more information, refer to the YUIDoc Syntax Reference\".</p>"},{"location":"#example-class-block","title":"Example Class Block","text":"<pre><code>/**\n* This is the description for my class.\n*\n* @class MyClass\n* @constructor\n*/\n</code></pre>"},{"location":"#example-method-block","title":"Example Method Block","text":"<pre><code>/**\n* My method description.  Like other pieces of your comment blocks, \n* this can span multiple lines.\n*\n* @method methodName\n* @param {String} foo Argument 1\n* @param {Object} config A config object\n* @param {String} config.name The name on the config object\n* @param {Function} config.callback A callback function on the config object\n* @param {Boolean} [extra=false] Do extra, optional work\n* @return {Boolean} Returns true on success\n*/\n</code></pre>"},{"location":"#example-property-block","title":"Example Property Block","text":"<pre><code>/**\n* My property description.  Like other pieces of your comment blocks, \n* this can span multiple lines.\n* \n* @property propertyName\n* @type {Object}\n* @default \"foo\"\n*/\n</code></pre>"},{"location":"args/","title":"Args","text":"<p>Generating documentation with YUIDoc is as simple as going to the top of your source tree and running: <pre><code>$ yuidoc .\n</code></pre> However, you can configure YUIDoc's behavior further by providing command line options, a JSON configuration file, or even both.</p> <p>This section discusses the <code>yuidoc</code> command line tool in more detail.</p>"},{"location":"args/#running-yuidoc-on-the-command-line","title":"Running YUIDoc on the Command Line","text":"<p>Certain <code>yuidoc</code> command line options correspond to entries in the the <code>yuidoc.json</code> configuration file. Command line options always take priority.</p> <pre><code>YUI Doc generates API documentation from a modified JavaDoc syntax.\n\nCurrent version (0.10.0)\n\nUsage: yuidoc &lt;options&gt; &lt;input path&gt;\n\nCommon Options:\n  -c, --config, --configfile &lt;filename&gt;  A JSON config file to provide configuration data.\n           You can also create a yuidoc.json file and place it\n           anywhere under your source tree and YUI Doc will find it\n           and use it.\n  -e, --extension &lt;comma sep list of file extensions&gt; The list of file extensions to parse \n           for api documentation. (defaults to .js)\n  -x, --exclude &lt;comma sep list of directories&gt; Directories to exclude from parsing \n           (defaults to '.DS_Store,.svn,CVS,.git,build_rollup_tmp,build_tmp')\n  -v, --version Show the current YUIDoc version\n  --project-version Set the doc version for the template\n  -N, --no-color Turn off terminal colors (for automation)\n  -C, --no-code Turn off code generation (don't include source files in output)\n  -n, --norecurse Do not recurse directories (default is to recurse)\n  --no-sort Do not alphabetical sorting of attributes, events, methods, and properties\n  -S, --selleck Look for Selleck component data and attach to API meta data\n  -V, --view Dump the Handlebars.js view data instead of writing template files\n  -p, --parse-only Only parse the API docs and create the JSON data, do not render templates\n  -o, --outdir &lt;directory path&gt; Path to put the generated files (defaults to ./out)\n  -t, --themedir &lt;directory path&gt; Path to a custom theme directory containing Handlebars templates\n  -H, --helpers &lt;comma separated list of paths to files&gt; Require these file and add Handlebars helpers. See docs for more information\n  --charset CHARSET Use this as the default charset for all file operations. Defaults to 'utf8'\n  -h, --help Show this help\n  -q, --quiet Supress logging output\n  -T, --theme &lt;simple|default&gt; Choose one of the built in themes (default is default)\n  --syntaxtype &lt;js|coffee&gt; Choose comment syntax type (default is js)\n  --server &lt;port&gt; Fire up the YUIDoc server for faster API doc developement. Pass optional port to listen on. (default is 3000)\n  --lint Lint your docs, will print parser warnings and exit code 1 if there are any\n\n  &lt;input path&gt; Supply a list of paths (shell globbing is handy here)\n</code></pre>"},{"location":"args/#running-yuidoc-in-server-mode","title":"Running YUIDoc in Server Mode","text":"<p>Most documentation tools (including YUIDoc) involve some sort of build process. However, YUIDoc provides a unique feature that allows you to short-circuit this.</p> <p>In server mode,  YUIDoc fires up a small Node.js based server and  begins parsing and displaying documentation in real time. This greatly speeds up the documentation authoring process, as you can edit your source code and  preview changes with a simple browser reload, rather than waiting for a build.</p> <p>To activate server mode on <code>localhost:3000</code>, run <code>yuidoc --server</code>. You can optionally specify an alternate port:</p> <pre><code>    yuidoc --server\n        or\n    yuidoc --server 5000\n</code></pre> <p>Then visit:</p> <pre><code>    http://127.0.0.1:3000/\n        or\n    http://127.0.0.1:5000/\n</code></pre> <p>Any changes you make to your YUIDoc comment blocks.  will be reflected when you reload the browser.  It's that simple!</p> <p>NOTE: Server mode is not a replacement for building and hosting your documentation, just a handy previewing tool.  For production, you should generate static HTML pages and  host them on a real web server.</p>"},{"location":"args/#working-with-yuidoc-parsed-data","title":"Working with YUIDoc Parsed Data","text":"<p>YUIDoc generates a <code>data.json</code> file after it parses your API documentation.  The <code>external.data</code> config option enables you to import a YUIDoc <code>data.json</code> file  from another project and mix it into your own documentation. </p> <p>This feature is handy when you are extending another project and would like to link back to their API documentation. For example, importing YUI Library's <code>data.json</code> file would enable YUIDoc to automatically link back to <code>Base</code>, <code>EventTarget</code>, and other core YUI objects that your own API might be extending or mixing in. </p> <p>Currently, importing external data enables YUIDoc to resolve HTML links <code>@extends</code> or <code>@use</code> keywords,  but does not cause YUIDoc to generate complete documentation for the external API. Future versions of YUIDoc may provide the option to mix in the data natively  and reproduce the external API right along with your own.</p>"},{"location":"args/#adding-external-yuidoc-data-to-your-project","title":"Adding External YUIDoc Data to Your Project","text":"<p>Create an <code>external</code> object under the <code>options</code> object in your <code>yuidoc.json</code> file and give it a property called <code>data</code> pointing to the URL of the external <code>data.json</code> file you wish to import.  <code>data</code> can be a string or an array of strings. </p> <pre><code>{\n  \"options\": {\n    \"external\": {\n      \"data\": \"http://yuilibrary.com/yui/docs/api/data.json\"\n    }\n  }\n}\n</code></pre> <p>Also, you are able to give <code>base</code> data within <code>external</code> for external base URLs.</p> <pre><code>{\n  \"options\": {\n    \"external\": {\n      \"data\": [\n        {\n          \"base\": \"http://emberjs.com/api/\",\n          \"json\": \"http://builds.emberjs.com/tags/v1.5.1/ember-docs.json\"\n        },\n        {\n          \"base\": \"http://emberjs.com/api/\",\n          \"json\": \"http://builds.emberjs.com/tags/v1.0.0-beta.6/ember-data-docs.json\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>NOTE: YUIDoc currently fetches external data on each run with no caching. </p>"},{"location":"args/#configuring-yuidoc-with-yuidocjson","title":"Configuring YUIDoc with yuidoc.json","text":"<p>You can also store most YUIDoc configurables in a <code>yuidoc.json</code> file. As mentioned in the command line arguments section, command line options always take priority over <code>yuidoc.json</code> configuration values.</p> <p>The <code>yuidoc.json</code> file must reside in a directory somewhere under where you execute <code>yuidoc</code>.  YUIDoc will scan the tree for this file before doing anything else.</p> <p>A short example <code>yuidoc.json</code> file would resemble:</p> <pre><code>{\n    \"name\": \"The Foo API\",\n    \"description\": \"The Foo API: a library for doing X, Y, and Z\",\n    \"version\": \"1.2.1\",\n    \"url\": \"http://example.com/\",\n    \"options\": {\n        \"outdir\": \"../build/apidocs\"\n    }\n}\n</code></pre> <p>See below for more examples.</p>"},{"location":"args/#yuidocjson-fields","title":"yuidoc.json Fields","text":""},{"location":"args/#general-yuidoc-project-information","title":"General YUIDoc Project Information","text":"Name Description <code>name</code> A short name for the project. <code>description</code> A one or two sentence description of the project. <code>version</code> The project's current version, as some kind of meaningful string. <code>url</code> The project's primary URL. This does not necessarily have to be the URL of the generated API documentation. <code>logo</code>          The logo to add to the header of all generated HTML documentation.          If you do not provide a header, YUIDoc will use the YUI logo by default."},{"location":"args/#yuidoc-options","title":"YUIDoc Options","text":"<p>Within the <code>options</code> object, you can provide any of the following fields:</p> Name Description <code>linkNatives</code> Selects whether to autolink native types such as <code>String</code> and <code>Object</code> over to the Mozilla Developer Network.  <code>attributesEmit</code>          Selects whether YUIDoc should autogenerate documentation for change events          generated by the YUI Attribute API.         When a YUI attribute <code>foo</code> changes its value,          YUI automatically fires a custom event named <code>fooChange</code>.         Setting <code>attributesEmit</code> to <code>true</code> instructs YUIDoc to         automatically generate documentation for each of these events.         You can set this value to <code>false</code> if you think that your audience         is well aware of change events and would not benefit from this extra verbiage.      <code>selleck</code>          Selects whether to add Selleck metadata.          If <code>true</code>, YUIDoc searches for a <code>component.json</code> file above the source tree and          attaches that data to the module data as extra information.      <code>ignorePaths</code> Specifies an array of string paths to ignore when using shell globbing. This only removes top level items from the list to initally scan. Use <code>exclude</code> to remove specific directories. <code>exclude</code> Specify a comma separated list of names you want to exclude from parses when YUIDoc recurses the source tree. <code>paths</code>          Specifies a single string <code>glob</code> or array of globs          to use when searching the source tree for docs to parse.      <code>outdir</code> Specifies the directory in which to place the rendered HTML files and assets. <code>tabtospace</code> Specifies the number of spaces each tab character in source code should be converted to when using YUIDoc's source code view. The default is 8. <code>external.data</code>          Provides a link to an external <code>data.json</code> file to merge into the local api docs.          For more information, refer to the external data example.      <code>markdown</code>          Options to pass to markdown-it, the Markdown compiler used to compile API descriptions.         See the markdown-it API for details.      <code>preprocessor</code>          Specifies the array of your preprocessor script or npm package like <code>yuidoc-preprocessor-foo</code>         that implements a preprocessor. See the example used preprocessor."},{"location":"args/#example-yui-3-library-api","title":"Example: YUI 3 Library API","text":"<p>This sample <code>yuidoc.json</code> file is used in the YUI 3 project:</p> <pre><code>{\n    \"name\": \"YUI 3\",\n    \"description\": \"YUI 3 JavaScript Framework\",\n    \"version\": \"3.5.0\",\n    \"url\": \"http://yuilibrary.com/\",\n    \"options\": {\n        \"linkNatives\": \"true\",        \n        \"attributesEmit\": \"true\",\n        \"selleck\": \"true\",\n        \"ignorePaths\": [ \"simpleyui\" ],\n        \"paths\": \"*/js\",\n        \"outdir\": \"../api-js\"\n    }\n}\n</code></pre>"},{"location":"args/#example-yuidoc-api","title":"Example: YUIDoc API","text":"<p>This sample <code>yuidoc.json</code> file is used in the YUIDoc project itself:</p> <pre><code>{\n  \"name\": \"YUIDoc\",\n  \"description\": \"YUIDoc documentation tool written in JavaScript\",\n  \"version\": \"0.2.38\",\n  \"url\": \"http://yuilibrary.com/projects/yuidoc\",\n  \"logo\": \"http://yuilibrary.com/img/yui-logo.png\",\n  \"options\": {\n    \"external\": {\n      \"data\": \"http://yuilibrary.com/yui/docs/api/data.json\"\n    },\n    \"linkNatives\": \"true\",\n    \"attributesEmit\": \"true\",\n    \"paths\": [\n      \"./lib\"\n    ],\n    \"outdir\": \"./output/api\"\n  }\n}\n</code></pre>"},{"location":"args/#example-using-preprocessor","title":"Example: Using preprocessor","text":"<p>This sample <code>yuidoc.json</code> file used preprocessor option:</p> <pre><code>{\n  \"name\": \"My Project\",\n  \"version\": \"1.0.0\",\n  \"options\": {\n    \"paths\": \"src\",\n    \"preprocessor\": [\"./path/to/custom_doc_preprocessor.js\", \"yuidoc-preprocessor-foo\"]\n  }\n}\n</code></pre>"},{"location":"syntax/","title":"Syntax","text":"<p>YUIDoc's syntax should be familiar if you've used Javadoc, JSDoc, Doxygen, or other documentation generator tools. YUIDoc relies on tags such as <code>@param</code> or <code>@return</code> embedded in comment blocks that start with <code>/**</code> and end with <code>*/</code>. See comment styles for more information. It includes a small number of tags for documenting specific YUI features, but most tags are generic enough to use with any object-oriented language.</p> <p>IMPORTANT: YUIDoc only parses YUIDoc comment blocks, not source code. This keeps YUIDoc relatively simple and language agnostic. However, it also means you must declare everything to YUIDoc explicitly. A code snippet will not display as a \"method\" or \"class\" until you describe it as such. A corollary is that YUIDoc will never generate empty, \"stub\" doc entries. for API members that lack comment blocks.</p>"},{"location":"syntax/#basic-requirements","title":"Basic Requirements","text":"<p>A given comment block must contain one (and only one) primary tag such as <code>@class</code> or <code>@method</code>, and zero or more secondary tags such as <code>@param</code>, <code>@type</code>, and <code>@extends</code>. Some secondary tags can be used in any comment block, while others only make sense alongside a particular primary tag.</p> <p>A source tree must contain at least one comment block with a <code>@module</code> tag.</p> <p>Each module must have at least one comment block with a <code>@class</code> tag.</p> <p>Each class may then have zero or more comment blocks with an <code>@attribute</code>, <code>@class</code>, <code>@event</code>, <code>@method</code>, or <code>@property</code> tag.</p>"},{"location":"syntax/#primary-tags","title":"Primary Tags","text":"<p>Each comment block must have one (and only one) of the following tags:</p> Name Example Description <code>module</code> <pre><code>/**\n * Provides the base Widget class...\n *\n * @module widget\n */\n</code></pre> <p>Indicates that the block describes a group of related classes.          For example, YUI's <code>app</code> module includes classes such as <code>App.Base</code>, <code>Model</code>, and <code>Router</code>.         You can optionally break modules up into submodules.          <p>YUIDoc requires you to provide at least one module per source tree.          Since there isn't always an obvious place to insert module documentation in JavaScript source,          the convention is to declare your module at the top of the file that contains your module's \"primary\" or \"base\" class.</p> <p>             See also:              <code>@class</code>,             <code>@for</code>,             <code>@main</code>,             <code>@submodule</code>.         </p> <code>main</code> <pre><code>/**\n * Provides more features for the widget module...\n *\n * @module widget\n * @submodule widget-foo\n * @main widget\n */\n</code></pre> <p>         When YUIDoc parses a module's directory, there may be several files in this directory that         provides documentation for that module and it's submodules. YUIDoc will attempt to determine         which module contains the main description for this module. If it has trouble doing that,         you can add a <code>@main</code> tag to your module/submodule description and YUIDoc will use this block as         the main module description on the modules API landing page.     </p> <code>class</code> <pre><code>/**\n * A utility that brokers HTTP requests...\n *\n * @class IO\n * @constructor\n */\nfunction IO (config) {\n</code></pre> <p>Indicates that the block describes a class.         In JavaScript, this is generally an object with a constructor function.          The value of <code>@class</code> should be the string that identifies the functional class on its parent object.          For example, the <code>@class</code> for <code>Y.DD.Drag</code> would be <code>Drag</code>          (and its <code>@namespace</code> would be <code>DD</code>).</p> <p>YUIDoc expects methods, properties, attributes, and events to belong to a class,          so in general you must provide at least one class for each module in your source tree.          A <code>@class</code> block should reside just above the class's constructor function,         and above all methods, events, properties, and attributes that belong to the class.</p> <p>A <code>@class</code> tag should be paired with          either a <code>@constructor</code> tag or a <code>@static</code> tag.</p> <p>             See also:              <code>@constructor</code>,             <code>@extends</code>,             <code>@extensionfor</code>,             <code>@for</code>,             <code>@module</code>,             <code>@namespace</code>,             <code>@static</code>,             <code>@uses</code>.         </p> <code>element</code> <pre><code>/**\n * This is the foo element description...\n *\n * @element x-foo\n */\n</code></pre> <p>Indicates that the block describes a Custom Element.         The <code>@attribute</code> tag works as a attribute of the element         when you specify a <code>@element</code> tag. You can also specify the         <code>@parents</code>, <code>@contents</code>,         and <code>@interface</code> tag for the element.</p> <p>             See also:             <code>@attribute</code>,             <code>@parents</code>,             <code>@contents</code>,             <code>@interface</code>.         </p> <code>method</code> <pre><code>/**\n * Returns this model's attributes as...\n *\n * @method toJSON\n * @return {Object} Copy of ...\n */\ntoJSON: function () {\n</code></pre> <p>Indicates that the block describes a method for the current class.         By default, the \"current\" class is the last class that YUIDoc parsed, but         you can reset this with the <code>@for</code> tag.</p> <p>A <code>@method</code> block should always reside directly above the method's definition.         At a minimum, you should also document any          parameters (<code>@param</code>) and         return values (<code>@return</code>).</p> <p>             See also:              <code>@chainable</code>,             <code>@class</code>,             <code>@constructor</code>,             <code>@for</code>,             <code>@param</code>,             <code>@return</code>,             <code>@throws</code>,             <code>@static</code>.         </p> <code>event</code> <pre><code>/**\n * Fired when an error occurs...\n *\n * @event error\n * @param {String} msg A description of...\n */\nvar EVT_ERROR = 'error',\n</code></pre> <p>Indicates that the block describes a custom event that the class can fire          at some interesting moment of code execution.          An <code>@event</code> block is somewhat similar to a <code>@method</code> block,          except that <code>@return</code> is irrelevant, and           <code>@param</code> is used to describe properties hanging off          the event object that callbacks listening for the event receive. </p> <p>Ideally, an <code>@event</code> block should reside above the code that defines the event,          even if that code is just a simple string declaration.         If you find that your <code>@event</code> block is \"floating in space,\"         you should at least place it underneath the class that owns the event,          grouped with any other events that the class can fire.</p> <p>             See also:              <code>@bubbles</code>,             <code>@class</code>,             <code>@for</code>,             <code>@param</code>.         </p> <code>property</code> <pre><code>/**\n * Template for this view's container...\n *\n * @property containerTemplate\n * @type String\n * @default \"&lt;div/&gt;\"\n */\ncontainerTemplate: '&lt;div/&gt;',\n</code></pre> <p>Indicates that the block describes a property belonging to the current class.</p> <p>As with methods, a <code>@property</code> block should always reside          directly above the point where the property is defined.         At a minimum, you should also provide the property's <code>@type</code>,          even if the value is <code>\"any\"</code> or <code>\"mixed\"</code>.</p> <p>             See also:              <code>@attribute</code>,             <code>@default</code>,             <code>@class</code>,             <code>@for</code>,             <code>@type</code>.         </p> <code>attribute</code> <pre><code>/**\n * Indicates whether this Widget\n * has been rendered...\n *\n * @attribute rendered\n * @readOnly\n * @default false\n * @type boolean\n */\nATTRS[RENDERED] = {\n</code></pre> <p>[YUI-specific] Indicates that the block describes a managed configuration attribute.           An attribute is an object created and managed by the YUI         <code>Attribute</code> API.         It is a kind of \"super-property\", with getters, setters, and other nifty features,          including the ability to automatically fire change events.</p> <p>An <code>@attribute</code> block should reside directly above the definition of the attribute,         whether that is inside a <code>Y.Base</code> object's <code>ATTRS</code> property or elsewhere.         Note that if your <code>yuidoc.json</code> file sets <code>attributesEmit</code> to <code>true</code>,          YUI will automatically generate documentation for the attribute's change events throughout the source tree,          with no extra YUIDoc comments needed from you.</p> <p>If you specify a <code>@element</code> tag, the <code>@attribute</code> tag works as         a attribute of the element.</p> <p>             See also: <code>@element</code>,             <code>@property</code>,             <code>@default</code>,             <code>@class</code>,             <code>@for</code>,             <code>@type</code>,             <code>@required</code>,             <code>@optional</code>.         </p>"},{"location":"syntax/#secondary-tags","title":"Secondary tags","text":"<p>After choosing one of the five primary tags, you can further document a module, class, method, event or property with one or more of the following secondary tags.</p> Name Example Description <code>submodule</code> <pre><code>/**\n * @module app\n * @submodule view\n */\n</code></pre> <p>Specifies that the module is actually a submodule of some parent module.          For example, the <code>app-transitions</code> module is a submodule of the larger <code>app</code> module.</p> <p>In YUI, submodules enable you to make very fine-grained choices about loading code.         For example, the <code>foo</code> module might have a minimal <code>foo-core</code> or <code>foo-base</code> submodule         that supplies <code>foo</code>'s basic functionality,         plus additional <code>foo-*</code> modules that carry optional features.         Using the YUI Loader, you can choose to load just <code>foo-core</code>,          <code>foo-core</code> plus a couple of extra modules,          or the entire <code>foo</code> \"rollup\".</p> <p>             See also:             <code>@module</code>.         </p> <code>namespace</code> <pre><code>/**\n * @namespace Test.Mock\n */\n</code></pre> <p>Specifies a class's namespace.         The <code>@namespace</code> should not include the \"root\" or \"global\" object          that your entire library hangs off of.          For example, <code>Y.DD.Drag</code> has          a <code>@class</code> of <code>Drag</code>         and a <code>@namespace</code> of <code>DD</code>, not <code>Y.DD</code>.</p> <p>Supplying a <code>@namespace</code> enables you to refer to the class in YUIDoc using just the simple class name.</p> <p>             See also:             <code>@class</code>.         </p> <code>extends</code> <pre><code>/**\n * @class View\n * @constructor\n * @extends Base\n */\n</code></pre> <p>Specifies that the class inherits members from a parent class,          perhaps using <code>Y.extend()</code>,          <code>Y.Base.create()</code>,         or similar methods.         YUIDoc will generate API documentation for          methods, properties, events, and attributes inherited from the parent class,         and link back to the parent class's documentation.         In the default YUIDoc theme, users can toggle whether inherited members should display.</p> <p>             See also:             <code>@class</code>,             <code>@extensionfor</code>,             <code>@uses</code>.         </p> <code>config</code> <pre><code>/**\n * @config docScrollX\n * @type Number\n */\n</code></pre> <p>[YUI-specific] Alias for <code>@attribute</code>.          In older versions of YUI, <code>@config</code> was a slightly different take on attributes,          but the two concepts have merged.           Modern YUIDoc comments should use <code>@attribute</code> instead.</p> <code>constructor</code> <pre><code>/**\n * @class IO\n * @constructor\n */\n</code></pre> <p>Indicates that the class is instantiable         (created with the <code>new</code> keyword).         A <code>@class</code> tag should be paired with          either a <code>@constructor</code> tag or a <code>@static</code> tag.</p> <p>             See also:             <code>@class</code>,             <code>@static</code>.         </p> <code>static</code> <pre><code>/**\n * YUI user agent detection...\n *\n * @class UA\n * @static\n */\n</code></pre> <p>Indicates that the method or class is static:</p> <ul> <li>For methods, indicates that the method is meant to be              called without instantiating the class:              <code>var node = Y.Node.create('');</code></li> <li>For classes, indicates that you should not              instantiate the class with <code>new</code>.              You can call all of the class's methods statically.          <p>A <code>@class</code> tag should be paired with          either a <code>@constructor</code> tag or a <code>@static</code> tag.</p> <p>             See also:             <code>@class</code>,             <code>@constructor</code>,             <code>@method</code>.         </p> <code>final</code> <pre><code>/**\n * Identifies state changes\n * originating from...\n *\n * @property SRC_REPLACE\n * @type String\n * @static\n * @final\n */\n</code></pre> <p>Indicates that the property or attribute is a constant and should not be changed.</p> <p>             See also:             <code>@attribute</code>,             <code>@property</code>,             <code>@readOnly</code>,             <code>@writeOnce</code>.         </p> <code>readOnly</code> <pre><code>/**\n * The current default button\n * as configured through...\n *\n * @attribute defaultButton\n * @type Node\n * @default null\n * @readOnly\n */\n</code></pre> <p>[YUI-specific] Indicates that the attribute is configured with the          <code>readOnly</code> property         and cannot be changed by calling the          <code>set()</code> method.         Read-only attributes should always document their <code>@default</code> value.</p> <p>Sometimes used with properties, as an alias for <code>@final</code>.</p> <p>             See also:             <code>@attribute</code>,             <code>@default</code>,             <code>@final</code>,             <code>@property</code>,             <code>@required</code>,             <code>@optional</code>,             <code>@writeOnce</code>.         </p> <code>writeOnce</code> <pre><code>/**\n * Diameter of the circular\n * background object. Other\n * objects scale accordingly.\n * Set this only before\n * rendering.\n *\n * @attribute diameter\n * @type {Number} number of px\n * in diameter\n * @default 100\n * @writeOnce\n */\n</code></pre> <p>[YUI-specific] Indicates that the attribute is configured with the         <code>writeOnce</code> property         and can only be set once --         by applying a <code>@default</code>,          by setting the value in the constructior,          or by calling the          <code>set()</code> method         for the first time.</p> <p>             See also:             <code>@attribute</code>,             <code>@default</code>,             <code>@final</code>,             <code>@required</code>,             <code>@optional</code>,             <code>@readOnly</code>.         </p> <code>optional</code> <pre><code>/**\n * An optional attribute,\n * not required for proper\n * use.\n *\n * @attribute extras\n * @type {Object} extra data\n * @optional\n */\n</code></pre> <p>         [YUI-specific] Indicates that the attribute is not         required to be provided for proper use of this class.         </p> <p>             See also:             <code>@attribute</code>,             <code>@default</code>,             <code>@final</code>,             <code>@required</code>,             <code>@readOnly</code>.         </p> <code>required</code> <pre><code>/**\n * A required attribute\n * that is required for proper\n * use, module will likely fail\n * if this is not provided.\n *\n * @attribute url\n * @type {String} url to fetch remote data from\n * @required\n */\n</code></pre> <p>         [YUI-specific] Indicates that the attribute is         required to be provided for proper use of this class.         </p> <p>             See also:             <code>@attribute</code>,             <code>@default</code>,             <code>@final</code>,             <code>@optional</code>,             <code>@readOnly</code>.         </p> <code>*param</code> <pre><code>/**\n * @param {String} name An\n * Attribute name or\n * object property path.\n */\n</code></pre> <pre><code>/**\n * @param {Object} [options] Data\n * to be mixed into the event\n * facade of the &lt;code&gt;change&lt;/code&gt;\n * event(s) for these attributes.\n * @param {Boolean} [options.silent]\n * If &lt;code&gt;true&lt;/code&gt;, no &lt;code&gt;change&lt;/code&gt; event\n * will be fired.\n */\n</code></pre> <p>Defines a parameter for an ordinary <code>@method</code>,          a parameter for a <code>@constructor</code>         (generally defined inside a <code>@class</code> block),         or a property that resides on an <code>@event</code> object.         Can take either of the forms:</p> <ul> <li><code>@param {type} name description</code></li> <li><code>@param name {type} description</code></li> </ul> <p>The <code>{type}</code> is optional, but if you include it,          you must surround it in curly braces so that YUIDoc          can distinguish it from the <code>name</code>.          The <code>name</code> also has optional syntax:</p> <ul> <li><code>[name]</code> \u2014 optional parameter</li> <li><code>[name=foo]</code> \u2014 default value is foo</li> <li><code>...name</code> \u2014 placeholder for 1..n args</li> <li><code>[...name]</code> \u2014 placeholder for 0..n args</li> </ul> <p>As shown in the example, you can also nest <code>@param</code> tags.          This enables you to document object parameters that          have their own particular nested structure.</p> <p>             See also:             <code>@class</code>,             <code>@constructor</code>,             <code>@event</code>,             <code>@method</code>,             <code>@return</code>.         </p> <code>return</code> <pre><code>/**\n * @method generateClientId\n * @return {String} Unique clientId.\n */\n</code></pre> <p>Specifies a method's return value.          A <code>@return</code> tag has the structure <code>@return {type} description</code>.         The <code>{type}</code> is optional.</p> <p>             See also:             <code>@method</code>,             <code>@param</code>.         </p> <code>throws</code> <pre><code>/**\n * @method generateClientId\n * @throws {Error} An error.\n */\n</code></pre> <p>Specifies an error which method throws.         A <code>@throws</code> tag has the structure <code>@throws {type} description</code>.         The <code>{type}</code> is optional.</p> <p>             See also:             <code>@method</code>,             <code>@return</code>.         </p> <code>for</code> <pre><code>/**\n * Some inner class 'foo'...\n *\n * @class foo\n * @for OuterClass\n */\n</code></pre> <pre><code>/**\n * Some method 'bar'\n * disconnected from\n * its class 'FarawayClass'...\n *\n * @method bar\n * @for FarawayClass\n */\n</code></pre> <p>Sets YUIDoc's class scope.</p> <p>Using <code>@for OuterClass</code> in a <code>@class</code> block creates an inner class.         YUIDoc will document methods and other items that follow that block          as belonging to the inner class, but the inner class is correctly          shown as belonging to its parent outer class.</p> <p>To close an inner class, add <code>@for OuterClass</code> (again!)          to the last <code>@attribute</code>, <code>@event</code>, <code>@method</code>, or <code>@property</code> block          in the inner class.          This resets the YUIDoc parser to use <code>OuterClass</code>          as the owner of subsequent items.</p> <p>If you are not inside an inner class,          using <code>@for FarawayClass</code>          in an <code>@attribute</code>, <code>@event</code>, <code>@method</code>, or <code>@property</code> block         will attach all that item and subsequent items          to the specified faraway class.          This is useful when you have a module that attaches extra         methods to a class's prototype,          but the main class definition is in some entirely different file.</p> <p>             See also:             <code>@class</code>,             <code>@method</code>.         </p> <code>type</code> <pre><code>/**\n * @type String\n */\n</code></pre> <pre><code>/**\n * @type HTMLElement|Node|String\n */\n</code></pre> <p>Specifies the type of a property or attribute.           You can specify a single type,          a list of legal types separated by vertical bars,          or if you are lazy, \"any\" or \"mixed\".</p> <p>             See also:             <code>@attribute</code>,             <code>@default</code>,             <code>@property</code>.         <p> <code>private</code> <pre><code>/**\n * Reference to the internal JSONP\n * instance used to make the queries.\n *\n * @private\n * @property _jsonp\n */\n</code></pre> <p>Indicates a member that should not be used externally.          Although YUIDoc does not generate documentation for <code>@private</code> blocks,          YUIDoc comments are still a nice, structured way to document internals in source code.         All methods and properties are assumed to be public          unless marked as private or protected.</p> <p>             See also:             <code>@protected</code>.         <p> <code>protected</code> <pre><code>/**\n * Removes the &lt;code&gt;container&lt;/code&gt; from\n * the DOM and ...\n *\n * @method _destroyContainer\n * @protected\n */\n</code></pre> <p>Indicates a member that should not be modified          by implementers unless they are creating a subclass.         All methods and properties are assumed to be public          unless marked as private or protected.</p> <p>             See also:             <code>@private</code>.         <p> <code>requires</code> <pre><code>/**\n * @module event-simulate\n * @requires event\n */\n</code></pre> <p>[Uncommon] Identifies one or more dependencies in the module declaration.         Can be a single module name or a comma-separated list.</p> <p>             See also:             <code>@extends</code>,             <code>@extensionfor</code>,             <code>@module</code>,             <code>@submodule</code>.         <p> <code>default</code> <pre><code>/**\n * @default false\n */\n</code></pre> <p>Specifies the default value of a property or attribute.         Should be paired with a <code>@type</code> tag.</p> <p>             See also:             <code>@attribute</code>,             <code>@property</code>,             <code>@type</code>.         <p> <code>*uses</code> <pre><code>/**\n * @class Panel\n * @constructor\n * @extends Widget\n * @uses WidgetAutohide\n * @uses WidgetButtons\n...\n */\n</code></pre> <p>Specifies that the class has some other class's          properties, methods, and other members mixed into its prototype,          perhaps using <code>Y.mix()</code>,          <code>Y.Base.mix()</code>,         <code>Y.Base.create()</code>,         or similar methods.         YUIDoc will generate API documentation for          methods, properties, events, and attributes mixed into the parent class,         and link back to the parent class's documentation.         In the default YUIDoc theme, users can toggle whether mixed in members should display.</p> <p>Note that <code>@uses</code> does not indicate inheritance.         To establish an \"is a\" relationship, use <code>@extends</code>.         Unlike <code>@extends</code>, you can provide multiple <code>@uses</code> tags. </p> <p>             See also:             <code>@class</code>,             <code>@extends</code>,             <code>@extensionfor</code>.         </p> <code>*example</code> <pre><code>/**\n * @example\n *     model.set('foo', 'bar');\n */\n</code></pre> <p>Indicates a block of example code          to be automatically parsed and displayed with          YUIDoc's Markdown and code highlighting parser.         Your code sample should be indented beneath the <code>@example</code> tag.         YUIDoc displays all examples highlighted with          <code> elements and other markup. <p>A block may include multiple <code>@example</code> tags.</p> <code>chainable</code> <pre><code>/**\n * Renders this view ...\n *\n * @method render\n * @chainable\n */\nrender: function () {\n    return this;\n},\n</code></pre> <p>Indicates that a method returns <code>this</code> (the parent object),          enabling you to chain it with other calls on the same object.</p> <p>             See also:             <code>@method</code>.         </p> <code>deprecated</code> <pre><code>/**\n * @property locale\n * @type String\n * @deprecated Use &lt;code&gt;config.lang&lt;/code&gt;\n * instead.\n */\n</code></pre> <p>Indicates that the module, class, or member is deprecated          and will be removed in a future release.         You can optionally supply a string message          describing what to use instead.</p> <p>             See also:             <code>@beta</code>,             <code>@since</code>.         </p> <code>since</code> <pre><code>/**\n * @since 3.4.0\n */\n</code></pre> <p>Indicates that the module, class, or member          was added to the source at the specified version.</p> <p>             See also:             <code>@beta</code>,             <code>@deprecated</code>.         </p> <code>async</code> <pre><code>/**\n * @async\n */\n</code></pre> <p>[Uncommon] Indicates that the method is          asynchronous and requires a callback.</p> <code>beta</code> <pre><code>/**\n * @beta\n */\n</code></pre> <p>Indicates that the method, class, or member is in beta          and might undergo backwards-incompatible changes in the near future.</p> <p>             See also:             <code>@deprecated</code>,             <code>@since</code>.         </p> <code>bubbles</code> <pre><code>/**\n * Handles the mouseup DOM event...\n *\n * @event drag:mouseup\n * @bubbles DDM\n */\n</code></pre> <p>Specifies the default target that a custom event bubbles to.         This is a useful tag if your API has a \"manager\" class that          is responsible for capturing a set of related custom events.</p> <p>             See also:             <code>@event</code>.         </p> <code>extension</code><code>extensionfor</code><code>extension_for</code> <pre><code>/**\n * @class PjaxBase\n * @extensionfor Router\n */\n</code></pre> <p>Indicates that the class is an extension object         designed to be optionally mixed into the specified class.</p> <p><code>@extensionfor</code> is almost the inverse of <code>@uses</code>.         The key difference is that <code>@uses</code> means,          \"this class always has the 'used' class mixed into its prototype,\"          while <code>@extensionfor</code> means,          \"this class can be mixed into the 'extensionfor' class,          but it isn't baked in by default.\"</p> <p>             See also:             <code>@class</code>,             <code>@extends</code>,             <code>@uses</code>.         </p> <code>parents</code> <pre><code>/**\n * @element x-foo\n * @parents &lt;body&gt;\n */\n</code></pre> <p>It's a secondary tag for the <code>@element</code> tag.         Indicates that the parent element of the element you specified.</p> <p>             See also:             <code>@element</code>,             <code>@attribute</code>,             <code>@contents</code>,             <code>@interface</code>.         </p> <code>contents</code> <pre><code>/**\n * @element x-foo\n * @contents &lt;x-bar&gt;\n */\n</code></pre> <p>It's a secondary tag for the <code>@element</code> tag.         Indicates that the element contains in the element you specified.</p> <p>             See also:             <code>@element</code>,             <code>@attribute</code>,             <code>@parents</code>,             <code>@interface</code>.         </p> <code>interface</code> <pre><code>/**\n * @element x-foo\n * @interface XFooElement\n */\n</code></pre> <p>It's a secondary tag for the <code>@element</code> tag.         Indicates that the interface for the element you specified.</p> <p>             See also:             <code>@element</code>,             <code>@attribute</code>,             <code>@parents</code>,             <code>@contents</code>.         </p> <p>A * indicates that you can supply multiple tags of that type in the same block.</p>"},{"location":"syntax/#parsed-but-not-in-the-theme-yet","title":"Parsed but not in the theme yet","text":"<p>     The following tags are parsed by the <code>DocParser</code> but are not in the default theme yet. </p> <code>author</code> <pre><code>\n</code></pre> Author information about this item <code>broadcast</code> <pre><code>\n</code></pre> Event broadcasts to a large audience than scoped <code>*category</code> <pre><code>\n</code></pre> Category to place this item into."},{"location":"syntax/#comment-styles","title":"Comment StylesExtra formatting","text":"<p>   The comment blocks can start with any amount of whitespace, and   optionally one or more asterisks. Valid examples include: </p> <p> <pre><code>/**\n * Description\n * @method description\n */\n</code></pre> </p> <p> <pre><code>/**\n * Description\n * @method description\n**/\n</code></pre> </p> <p> <pre><code>/**\nDescription\n@method description\n*/\n</code></pre> </p> <p> <pre><code>/**\nDescription\n@method description\n**/\n</code></pre> </p> <p>     YUIDoc supports 3 main forms of formatting your documentation. HTML,     Markdown &amp; Selleck. </p> <code>HTML</code> Doc comments may contain standard HTML markup and YUIDoc will display it as is. <code>Markdown</code> Full Markdown syntax     is also supported.      <code>Selleck</code> Selleck's additional parsing is also supported. Markdown and Code Highlighting <p> Inside any documentation block you may use Markdown or Selleck based markup. If you indent your code snippets, YUIDoc will automatically wrap them in a code block and syntax highlight them for you. </p> <pre><code>/**\n * This is the __module__ description for the &lt;code&gt;YUIDoc&lt;/code&gt; module.\n *\n *     var options = {\n *         paths: [ './lib' ],\n *         outdir: './out'\n *     };\n *\n *     var Y = require('yuidoc');\n *     var json = (new Y.YUIDoc(options)).run();\n *\n * @class YUIDoc\n * @main yuidoc\n */\n</code></pre> <p> This would render as: </p> <p>This is the module description for the <code>YUIDoc</code> module.</p> <pre><code>    var options = {\n        paths: [ './lib' ],\n        outdir: './out'\n    };\n\n    var Y = require('yuidoc');\n    var json = (new Y.YUIDoc(options)).run();\n</code></pre> Cross-referencing Modules and Classes <p>YUIDoc also includes a Handlebars <code>blockHelper</code> that enables you to  easily cross-reference classes and modules. It uses this pattern:  </p> <pre><code>#crossLink \"Class/item:type\"\n\n#crossLink \"Foo/bar:event\"\n#crossLink \"Foo/bar:attribute\"\n#crossLink \"Foo/bar:method\" --default\n</code></pre> <p> So, for example, if you include: </p> <pre><code>/**\n *\n * This module also uses \\{{#crossLink \"Foo\"}}\\{{/crossLink}}, where Foo is a class name.\n * Also see \\{{#crossLink \"myClass/Foo:method\"}}\\{{/crossLink}}, where myClass is a class name and Foo is a method on that class.\n *\n * This module uses \\{{#crossLinkModule \"widget\"}}\\{{/crossLinkModule}}, where widget is a module name\n *\n * This module also uses \\{{#crossLink \"Bar\"}} an awesome class \\{{/crossLink}} named Bar.\n */\n</code></pre> <p> This automatically generates an internal link to Foo's API reference page: </p> <pre><code>&lt;p&gt;\nThis module also uses &lt;a href=\"../classes/Foo.html\" class=\"crosslink\"&gt;Foo&lt;/a&gt;, \nwhere Foo is a class or module name.\n&lt;/p&gt;\n&lt;p&gt;\nAlso see &lt;a href=\"../classes/myClass.html#method_Foo\"&gt;Foo&lt;/a&gt;, where myClass \nis a class name and Foo is a method on that class.\n&lt;/p&gt;\n&lt;p&gt;\nThis module uses &lt;a href=\"../modules/widget.html\"&gt;widget&lt;/a&gt;, where widget is a module name\n&lt;/p&gt;\n&lt;p&gt;\nThis module also uses &lt;a href=\"../classes/Bar.html\" class=\"crosslink\"&gt;an awesome class&lt;/a&gt;\nnamed Bar.\n&lt;/p&gt;\n</code></pre> <p> You can also call <code>crossLinkRaw</code> to return only the HREF portion of the link, so you can link it yourself. </p> Using custom Handlebars block helpers <p> You can tell <code>YUIDoc</code> to include custom <code>Y.Handlebars</code> helpers with the <code>-H</code> or <code>--helpers</code> command line arguments (or <code>helpers</code> Array in the <code>yuidoc.json</code> file).  Here is an example <code>helper.js</code> file:  <pre><code>module.exports = {\n    davglass: function(item) {\n        return \"Dav Glass says: \" + item\n    }\n};\n</code></pre> <p> Now you can use the <code>davglass</code> helper inside your own docs like this: </p> <pre><code>/**\n * This is also a test \\{{#davglass \"Foo\"}}\\{{/davglass}}\n */\n</code></pre>  This will output this in your documentation:  <pre><code>&lt;p&gt;\n This is also a test Dav Glass says: Foo\n&lt;/p&gt;\n</code></pre>"},{"location":"themes/","title":"Themes","text":"<p>YUIDoc uses Handlebars.js to render its templates. For easy customization, YUIDoc's default templates provide a specific set of file overrides.</p>"},{"location":"themes/#directories","title":"Directories","text":"<p>The default theme consists of <code>assets/</code>, <code>layouts/</code> and <code>partials/</code> directories, along with a <code>theme.json</code> file that describes theme-related variables, such as the JS and CSS to load.</p> <pre><code>.\n\u2514\u2500 themes/\n   \u2514\u2500 default/\n      \u251c\u2500 assets/                # Project assets, css, js\n\u251c\u2500 layouts/\n      \u2502  \u2514\u2500 *.handlebars        # Handlebars files for layouts\n\u251c\u2500 partials/\n      \u2502  \u2514\u2500 *.handlebars        # Handlebars files for partials\n\u2514\u2500 theme.json             # JSON file with theme variables\n</code></pre>"},{"location":"themes/#layouts","title":"Layouts","text":"<p>A YUIDoc template has two primary layout files: <code>main.handlebars</code> and <code>xhr.handlebars</code>.</p> <code>main</code>          Provides a complete wrapper around every rendered page.         <code>main.handlebars</code> includes the full HTML header and footer markup, CSS, and JS         for every YUIDoc API page.      <code>xhr</code>          Provides a smaller layout for the built-in doc server to use when requesting an individual page via XHR.         This enables the browser to refresh just the content pane and avoid loading the complete  markup for the entire page.         The <code>xhr</code> template enables YUIDoc to progressively enhance the API documentation in an efficient manner."},{"location":"themes/#partials","title":"Partials","text":"<p>For each section of the layout that derives from parsed YUIDoc comment data, YUIDoc provides a Handlebars partial.</p> <code>index</code> Renders the main index content. <code>sidebar</code> Renders the tabview containing the lists of classes and modules. <code>options</code> Renders the filter options at the top of the page, which enable the user to hide and show private methods, inherited methods, and so on. <code>attrs</code> Renders documentation for an individual YUI Attribute. <code>classes</code> Renders documentation for an individual class. <code>events</code> Renders documentation for an individual event. <code>files</code> Renders the API's source files. <code>method</code> Renders documentation for an individual method. <code>module</code> Renders documentation for an individual module. <code>props</code> Renders documentation for an individual property."},{"location":"themes/#overriding-a-partiallayout","title":"Overriding a Partial/Layout","text":"<p>YUIDoc's <code>--themedir</code> option specifies a directory containing layouts and partials that override the default theme. For example:</p> <pre><code>yuidoc --themedir ./mytheme\n</code></pre> <p>causes YUIDoc to inspect the directory <code>./mytheme</code> for template overrides. If this directory contains an override such as <code>./mytheme/partials/method.handlebars</code>, YUI will parse its internal templates first, then apply the custom <code>method.handlebars</code> partial. If a theme has no explicit override for a given template file, YUIDoc simply falls back to using the default layout or partial.</p>"}]}